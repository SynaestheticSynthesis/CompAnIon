import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'features/emotion_check_in/emotion_check_in_screen.dart';
// Remove this line if not used:
// import 'features/reflection/reflection_screen.dart';
import 'features/remember_me/remember_me_screen.dart'; // Use features, not modules
import 'features/settings/settings_screen.dart';
import 'features/palliative_care/palliative_care_screen.dart';
import 'l10n/app_localizations.dart'; // Generated by intl_utils or flutter gen-l10n
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(const CompAnIonApp());
}

class CompAnIonApp extends StatefulWidget {
  const CompAnIonApp({super.key});

  @override
  State<CompAnIonApp> createState() => _CompAnIonAppState();
}

class _CompAnIonAppState extends State<CompAnIonApp> {
  bool _isDark = false;
  int _selectedIndex = 0;
  Locale _locale = const Locale('en');
  bool _showOnboarding = false;

  // Custom color schemes
  ThemeData get _lightTheme => ThemeData(
        brightness: Brightness.light,
        primaryColor: const Color(0xFFB2FF59), // light green
        scaffoldBackgroundColor: const Color(0xFFF9FFF3),
        colorScheme: ColorScheme.light(
          primary: const Color(0xFFB2FF59), // light green
          secondary: const Color(0xFFFFF176), // yellow accent
          background: const Color(0xFFF9FFF3),
        ),
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFFB2FF59),
          foregroundColor: Colors.black,
        ),
        cardColor: Colors.white,
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFFFFF176),
            foregroundColor: Colors.black,
          ),
        ),
      );

  ThemeData get _darkTheme => ThemeData(
        brightness: Brightness.dark,
        primaryColor: const Color(0xFF232946), // deep space blue
        scaffoldBackgroundColor: const Color(0xFF121629),
        colorScheme: ColorScheme.dark(
          primary: const Color(0xFF232946),
          secondary: const Color(0xFF9F86FF), // violet accent
          background: const Color(0xFF121629),
        ),
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFF232946),
          foregroundColor: Colors.white,
        ),
        cardColor: const Color(0xFF232946),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Color(0xFF9F86FF),
            foregroundColor: Colors.white,
          ),
        ),
      );

  @override
  void initState() {
    super.initState();
    _checkOnboarding();
  }

  Future<void> _checkOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    final seen = prefs.getBool('onboardingSeen') ?? false;
    if (!seen) {
      setState(() => _showOnboarding = true);
    }
  }

  Future<void> _completeOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('onboardingSeen', true);
    setState(() => _showOnboarding = false);
  }

  @override
  Widget build(BuildContext context) {
    final theme = _isDark ? _darkTheme : _lightTheme;
    final bgColor = theme.scaffoldBackgroundColor;

    // Build screens dynamically to access latest _locale and setState
    final List<Widget> screens = [
      EmotionCheckInScreen(
        onToggleTheme: () => setState(() => _isDark = !_isDark),
        isDark: _isDark,
      ),
      RememberMeScreen(),
      PalliativeCareScreen(),
      SettingsScreen(
        currentLocale: _locale,
        onLocaleChanged: (locale) {
          setState(() => _locale = locale);
        },
      ),
    ];

    return ScreenUtilInit(
      designSize: const Size(390, 844),
      minTextAdapt: true,
      builder: (context, child) => AnimatedTheme(
        data: theme,
        duration: const Duration(milliseconds: 400),
        curve: Curves.easeInOutCubic,
        child: Builder(
          builder: (context) {
            if (_showOnboarding) {
              return _OnboardingScreen(onFinish: _completeOnboarding);
            }
            return AnimatedContainer(
              duration: const Duration(milliseconds: 400),
              curve: Curves.easeInOutCubic,
              color: bgColor,
              child: MaterialApp(
                title: 'CompAnIon',
                theme: _lightTheme,
                darkTheme: _darkTheme,
                themeMode: _isDark ? ThemeMode.dark : ThemeMode.light,
                debugShowCheckedModeBanner: false,
                localizationsDelegates: const [
                  AppLocalizations.delegate,
                  GlobalMaterialLocalizations.delegate,
                  GlobalWidgetsLocalizations.delegate,
                  GlobalCupertinoLocalizations.delegate,
                ],
                locale: _locale,
                supportedLocales: const [
                  Locale('en'),
                  Locale('el'),
                ],
                home: Builder(
                  builder: (context) {
                    final loc = AppLocalizations.of(context)!;
                    return Scaffold(
                      appBar: AppBar(
                        title: Text(
                          _selectedIndex == 0
                            ? loc.menuEmotionCheckIn
                            : _selectedIndex == 1
                              ? loc.menuRememberMe
                              : _selectedIndex == 2
                                ? 'Ανακουφιστική Φροντίδα'
                                : loc.settings ?? 'Settings'
                        ),
                      ),
                      drawer: Drawer(
                        child: ListView(
                          padding: EdgeInsets.zero,
                          children: [
                            DrawerHeader(
                              decoration: BoxDecoration(
                                color: theme.colorScheme.primary,
                              ),
                              child: Text(
                                loc.appTitle,
                                style: const TextStyle(fontSize: 22, color: Colors.white),
                              ),
                            ),
                            ListTile(
                              leading: const Icon(Icons.emoji_emotions),
                              title: Text(loc.menuEmotionCheckIn),
                              selected: _selectedIndex == 0,
                              onTap: () {
                                setState(() => _selectedIndex = 0);
                                Navigator.pop(context);
                              },
                            ),
                            ListTile(
                              leading: const Icon(Icons.favorite),
                              title: Text(loc.menuRememberMe),
                              selected: _selectedIndex == 1,
                              onTap: () {
                                setState(() => _selectedIndex = 1);
                                Navigator.pop(context);
                              },
                            ),
                            ListTile(
                              leading: const Icon(Icons.local_hospital),
                              title: const Text('Ανακουφιστική Φροντίδα'),
                              selected: _selectedIndex == 2,
                              onTap: () {
                                setState(() => _selectedIndex = 2);
                                Navigator.pop(context);
                              },
                            ),
                            ListTile(
                              leading: const Icon(Icons.settings),
                              title: Text(loc.settings ?? 'Settings'),
                              selected: _selectedIndex == 3,
                              onTap: () {
                                setState(() => _selectedIndex = 3);
                                Navigator.pop(context);
                              },
                            ),
                          ],
                        ),
                      ),
                      body: screens[_selectedIndex],
                    );
                  },
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
// Δεν χρειάζεται αλλαγή αν δεν εμφανίζεται δεύτερο title στο σώμα των άλλων screens.
// Ελέγξτε τα screens σας για διπλά titles/headings.

class _OnboardingScreen extends StatefulWidget {
  final VoidCallback onFinish;
  const _OnboardingScreen({required this.onFinish});

  @override
  State<_OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<_OnboardingScreen> {
  int _page = 0;

  final List<Map<String, String>> _steps = [
    {
      'title': 'Welcome to CompAnIon!',
      'desc': 'A mindful, emotionally intelligent companion. Here to listen, reflect, and support you.'
    },
    {
      'title': 'Emotion Check-In',
      'desc': 'Record how you feel, reflect, and track your emotional journey.'
    },
    {
      'title': 'Remember Me',
      'desc': 'Honor loved ones, remember special dates, and keep memories alive.'
    },
    {
      'title': 'Palliative Care',
      'desc': 'Find support and resources for serious diagnoses and emotional needs.'
    },
    {
      'title': 'Settings & Privacy',
      'desc': 'All data stays on your device. Switch language, theme, and enable Care Mode for extra warmth.'
    },
  ];

  @override
  Widget build(BuildContext context) {
    final step = _steps[_page];
    return Scaffold(
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(28),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(step['title']!, style: const TextStyle(fontSize: 26, fontWeight: FontWeight.bold)),
              const SizedBox(height: 24),
              Text(step['desc']!, style: const TextStyle(fontSize: 18), textAlign: TextAlign.center),
              const SizedBox(height: 40),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(_steps.length, (i) => Container(
                  margin: const EdgeInsets.symmetric(horizontal: 4),
                  width: 12, height: 12,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: i == _page ? Colors.blueAccent : Colors.grey[300],
                  ),
                )),
              ),
              const SizedBox(height: 40),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  if (_page > 0)
                    TextButton(
                      onPressed: () => setState(() => _page--),
                      child: const Text('Back'),
                    ),
                  if (_page < _steps.length - 1)
                    ElevatedButton(
                      onPressed: () => setState(() => _page++),
                      child: const Text('Next'),
                    ),
                  if (_page == _steps.length - 1)
                    ElevatedButton(
                      onPressed: widget.onFinish,
                      child: const Text('Start'),
                    ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
// This is the main entry point for the app.
// It initializes the app, sets up themes, localization, and handles onboarding.