import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'features/emotion_check_in/emotion_check_in_screen.dart';
// import 'features/reflection/reflection_screen.dart'; // Only if used
import 'features/remember_me/remember_me_screen.dart' hide ElevatedButton, SizedBox;
import 'features/settings/settings_screen.dart';
import 'features/palliative_care/palliative_care_screen.dart';
import 'l10n/app_localizations.dart'; // Generated by intl_utils or flutter gen-l10n
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(const CompAnIonApp());
}

class CompAnIonApp extends StatefulWidget {
  const CompAnIonApp({super.key});

  @override
  State<CompAnIonApp> createState() => _CompAnIonAppState();
}

class _CompAnIonAppState extends State<CompAnIonApp> {
  bool _isDark = false;
  int _selectedIndex = 0;
  Locale _locale = const Locale('en');
  bool _showOnboarding = false;
  String _gender = 'neutral';
  String _fontFamily = 'Nunito'; // Add font state

  // Custom color schemes
  ThemeData get _lightTheme => ThemeData(
        brightness: Brightness.light,
        primaryColor: const Color(0xFFB2FF59),
        scaffoldBackgroundColor: const Color(0xFFF9FFF3),
        colorScheme: ColorScheme.light(
          primary: const Color(0xFFB2FF59),
          secondary: const Color(0xFFFFF176),
          surface: const Color(0xFFF9FFF3), // replace background with surface
        ),
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFFB2FF59),
          foregroundColor: Colors.black,
        ),
        cardColor: Colors.white,
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFFFFF176),
            foregroundColor: Colors.black,
          ),
        ),
        fontFamily: _fontFamily, // Use selected font
      );

  ThemeData get _darkTheme => ThemeData(
        brightness: Brightness.dark,
        primaryColor: const Color(0xFF232946),
        scaffoldBackgroundColor: const Color(0xFF121629),
        colorScheme: ColorScheme.dark(
          primary: const Color(0xFF232946),
          secondary: const Color(0xFF9F86FF),
          surface: const Color(0xFF121629), // replace background with surface
        ),
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFF232946),
          foregroundColor: Colors.white,
        ),
        cardColor: const Color(0xFF232946),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Color(0xFF9F86FF),
            foregroundColor: Colors.white,
          ),
        ),
        fontFamily: _fontFamily, // Use selected font
      );

  @override
  void initState() {
    super.initState();
    _checkOnboarding();
  }

  Future<void> _checkOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    final seen = prefs.getBool('onboardingSeen') ?? false;
    if (!seen) {
      setState(() => _showOnboarding = true);
    }
  }

  Future<void> _completeOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('onboardingSeen', true);
    setState(() => _showOnboarding = false);
  }

  @override
  Widget build(BuildContext context) {
    // Remove unused local variable
    // final bgColor = theme.scaffoldBackgroundColor;
    // Remove print statement
    // print('CompAnIonApp is building');
    // ...existing code...
    return ScreenUtilInit(
      designSize: const Size(390, 844),
      minTextAdapt: true,
      builder: (context, child) => AnimatedTheme(
        data: theme,
        duration: const Duration(milliseconds: 400),
        curve: Curves.easeInOutCubic,
        child: MaterialApp(
          title: 'CompAnIon',
          theme: _lightTheme,
          darkTheme: _darkTheme,
          themeMode: _isDark ? ThemeMode.dark : ThemeMode.light,
          debugShowCheckedModeBanner: false,
          localizationsDelegates: const [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
            GlobalCupertinoLocalizations.delegate,
          ],
          locale: _locale,
          supportedLocales: const [
            Locale('en'),
            Locale('el'),
          ],
          home: Builder(
            builder: (context) {
              if (_showOnboarding) {
                return _OnboardingScreen(onFinish: _completeOnboarding);
              }
              final loc = AppLocalizations.of(context)!;
              return Scaffold(
                appBar: AppBar(
                  title: Text(
                    _selectedIndex == 0
                      ? loc.menuEmotionCheckIn
                      : _selectedIndex == 1
                        ? loc.menuRememberMe
                        : _selectedIndex == 2
                          ? (loc.menuPalliativeCare ?? 'Ανακουφιστική Φροντίδα')
                          : (loc.settings ?? 'Settings')
                  ),
                  actions: [
                    IconButton(
                      icon: const Icon(Icons.info_outline),
                      tooltip: 'What is this?', // fallback if loc.infoTooltip missing
                      onPressed: () {
                        showDialog(
                          context: context,
                          builder: (context) => _ContextualHelpDialog(index: _selectedIndex, loc: loc),
                        );
                      },
                    ),
                  ],
                ),
                drawer: Drawer(
                  child: ListView(
                    padding: EdgeInsets.zero,
                    children: [
                      DrawerHeader(
                        decoration: BoxDecoration(
                          color: theme.colorScheme.primary,
                        ),
                        child: Text(
                          loc.appTitle,
                          style: const TextStyle(fontSize: 22, color: Colors.white),
                        ),
                      ),
                      ListTile(
                        leading: const Icon(Icons.emoji_emotions),
                        title: Text(loc.menuEmotionCheckIn),
                        selected: _selectedIndex == 0,
                        onTap: () {
                          setState(() => _selectedIndex = 0);
                          Navigator.pop(context);
                        },
                      ),
                      ListTile(
                        leading: const Icon(Icons.favorite),
                        title: Text(loc.menuRememberMe),
                        selected: _selectedIndex == 1,
                        onTap: () {
                          setState(() => _selectedIndex = 1);
                          Navigator.pop(context);
                        },
                      ),
                      ListTile(
                        leading: const Icon(Icons.local_hospital),
                        title: Text(loc.menuPalliativeCare ?? 'Ανακουφιστική Φροντίδα'),
                        selected: _selectedIndex == 2,
                        onTap: () {
                          setState(() => _selectedIndex = 2);
                          Navigator.pop(context);
                        },
                      ),
                      ListTile(
                        leading: const Icon(Icons.settings),
                        title: Text(loc.settings ?? 'Settings'),
                        selected: _selectedIndex == 3,
                        onTap: () {
                          setState(() => _selectedIndex = 3);
                          Navigator.pop(context);
                        },
                      ),
                    ],
                  ),
                ),
                body: screens[_selectedIndex],
              );
            },
          ),
        ),
      ),
    );
  }
}
// Δεν χρειάζεται αλλαγή αν δεν εμφανίζεται δεύτερο title στο σώμα των άλλων screens.
// Ελέγξτε τα screens σας για διπλά titles/headings.

class _OnboardingScreen extends StatefulWidget {
  final VoidCallback onFinish;
  const _OnboardingScreen({required this.onFinish});

  @override
  State<_OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<_OnboardingScreen> {
  int _page = 0;

  // Rename _steps to steps
  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final List<Map<String, String>> steps = [
      {
        'title': 'Welcome to CompAnIon!', // fallback if loc.onboardingWelcomeTitle missing
        'desc': 'This is not just an app. It is a presence, a companion, a space for your truth. Take a breath and notice: you hold a tool for self-connection, not just productivity.'
      },
      {
        'title': loc.onboardingEmotionTitle ?? 'Emotion Check-In',
        'desc': loc.onboardingEmotionDesc ?? 'Here, you record how you feel. Pause, reflect, and let yourself be honest. Every emotion is valid. CompAnIon listens, never judges.'
      },
      {
        'title': loc.onboardingReflectionTitle ?? 'Reflection Mode',
        'desc': loc.onboardingReflectionDesc ?? 'After each check-in, you are invited to reflect. These questions are not tests—they are invitations to deeper understanding. Take your time.'
      },
      {
        'title': loc.onboardingRememberTitle ?? 'Remember Me',
        'desc': loc.onboardingRememberDesc ?? 'Honor loved ones, remember special dates, and keep memories alive. This is a space for tribute, gratitude, and gentle remembrance.'
      },
      {
        'title': loc.onboardingPalliativeTitle ?? 'Palliative Care',
        'desc': loc.onboardingPalliativeDesc ?? 'Find support and resources for serious diagnoses and emotional needs. CompAnIon is here for every moment, including the difficult ones.'
      },
      {
        'title': loc.onboardingSettingsTitle ?? 'Settings & Privacy',
        'desc': loc.onboardingSettingsDesc ?? 'All data stays on your device. You choose your language, theme, and Care Mode. Privacy and dignity are at the heart of CompAnIon.'
      },
      {
        'title': loc.onboardingFinalTitle ?? 'A Final Thought',
        'desc': loc.onboardingFinalDesc ?? 'CompAnIon is built on empathy, presence, and respect. As you begin, ask yourself: “What do I need most right now?” This companion is here to help you remember, reflect, and feel less alone.'
      },
    ];
    final step = steps[_page];
    return Scaffold(
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(28),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(step['title']!, style: const TextStyle(fontSize: 26, fontWeight: FontWeight.bold)),
              const SizedBox(height: 24),
              Text(step['desc']!, style: const TextStyle(fontSize: 18), textAlign: TextAlign.center),
              const SizedBox(height: 40),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(steps.length, (i) => Container(
                  margin: const EdgeInsets.symmetric(horizontal: 4),
                  width: 12, height: 12,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: i == _page ? Colors.blueAccent : Colors.grey[300],
                  ),
                )),
              ),
              const SizedBox(height: 40),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  if (_page > 0)
                    TextButton(
                      onPressed: () => setState(() => _page--),
                      child: const Text('Back'), // fallback if loc.previous missing
                    ),
                  if (_page < steps.length - 1)
                    ElevatedButton(
                      onPressed: () => setState(() => _page++),
                      child: const Text('Next'), // fallback if loc.next missing
                    ),
                  if (_page == steps.length - 1)
                    ElevatedButton(
                      onPressed: widget.onFinish,
                      child: const Text('Start'), // fallback if loc.start missing
                    ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Contextual Help Dialog for each main screen
class _ContextualHelpDialog extends StatelessWidget {
  final int index;
  final AppLocalizations loc;
  const _ContextualHelpDialog({required this.index, required this.loc});

  @override
  Widget build(BuildContext context) {
    String title;
    String message;
    switch (index) {
      case 0:
        title = loc.menuEmotionCheckIn;
        message = loc.helpEmotionCheckIn ?? 'This is your space to notice and record how you feel. Every emotion matters. CompAnIon is here to listen, not judge. Take a moment to reflect and honor your truth.';
        break;
      case 1:
        title = loc.menuRememberMe;
        message = loc.helpRememberMe ?? 'Here you can honor loved ones, remember special dates, and keep memories alive. Tribute and gratitude are at the heart of this space.';
        break;
      case 2:
        title = loc.menuPalliativeCare ?? 'Ανακουφιστική Φροντίδα';
        message = loc.helpPalliativeCare ?? 'Find support and resources for serious diagnoses and emotional needs. CompAnIon offers presence and care, even in difficult times.';
        break;
      case 3:
        title = loc.settings ?? 'Settings';
        message = loc.helpSettings ?? 'Customize your experience: language, theme, font, and Care Mode. Privacy is sacred—your data stays on your device.';
        break;
      default:
        title = loc.appTitle;
        message = loc.helpDefault ?? 'A mindful, emotionally intelligent companion. Here to help you reconnect with yourself.';
    }
    return AlertDialog(
      title: Text(title),
      content: Text(message, style: const TextStyle(fontSize: 16)),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text(loc.close ?? 'Close'),
        ),
      ],
    );
  }
}
// This is the main entry point for the app.
// It initializes the app, sets up themes, localization, and handles onboarding.